import './Another.css'
export default function Another(){
    return(
        <div className={"Another"}>
            <div className={"Another-left"}>
                <h2>Коротко о другом</h2>
                <h3>React Native</h3>
                <p>React Native - это то, что открывает разработчикам дорогу в мир разработки мобильных приложений на их
                родном Javascript. React Native поддерживает такие платформы как Android, Android TV, iOS, macOS, tvOS, Web Windows и UWP,
                    позволяя разработчикам использовать возможности библиотеки React вне браузера для создания нативных приложенийимеющих полный
                    доступ к системным API платформ.
                    Основные принципы работы React Native практически идентичны принципам работы React, за исключением того,
                    что React Native управляет не браузерной DOM, а платформенными интерфейсными компонентами. JavaScript-код,
                    написанный разработчиком, выполняется в фоновом потоке, и взаимодействует с платформенными API через
                    асинхронную систему обмена данными, называемую Bridge. В 2021 году ожидается замена Bridge на более производительную
                    синхронную модель обмена данными, поддерживающую парадигму zero-copy.

                    Хотя система стилей (способ конфигурации визуальных свойств элементов интерфейса) React Native имеет синтаксис,
                    похожий на CSS, фреймворк не использует технологии HTML или CSS как таковые.
                    Вместо этого для каждой из поддерживаемых фреймворком операционных систем реализованы программные
                    адаптеры, применяющие заданный разработчиком стиль к платформенному интерфейсному элементу.

                    React Native также позволяет разработчикам использовать уже существующий код,
                    написанный на других языках программирования — например, Java или Kotlin для Android и Objective-C
                    или Swift для iOS. Также React Native поддерживает интеграцию в уже существующие приложения — например,
                    часть интерфейса мобильного приложения может быть реализована на React Native, а часть — при помощи
                    чисто платформенных средств.
                </p>
            </div>
            <div className={"Another-right"}>
                <h3>Классовые и функциональные компоненты</h3>
                <p>Компоненты React - это функции или классы, принимающие в себе "пропсы" (props). Функциональные компоненты буквально являются функциями, поэтому
                так и называются, а классовые соответственно - классы.Когда React встречает подобный элемент,
                    он собирает все JSX-атрибуты и дочерние элементы в один объект и передаёт их нашему компоненту.
                    Этот объект называется «пропсы» (props).
                    Компоненты могут ссылаться на другие компоненты в возвращённом ими дереве.
                    Это позволяет нам использовать одну и ту же абстракцию — компоненты — на любом уровне нашего приложения.
                    Неважно, пишем ли мы кнопку, форму или целый экран: все они, как правило, представляют собой компоненты в React-приложениях.
                    React достаточно гибкий, но есть одно правило, которое нельзя нарушать:
                    React-компоненты обязаны вести себя как чистые функции по отношению к своим пропсам.
                    Из преимуществ функциональных компонентов является простота написания. То есть, мы просто создаем функцию, принимающую в себя пропсы, внутри которой
                    возвращает HTML-код. В то время как классовые компоненты имеют больше заморочек в написании. Но главным преимуществом функциональных
                    компонентов является Hotreload, когда
                    после обновления страницы, она быстро подгружается, в то время как классовые с нуля грузят страницу
                </p>
            </div>
        </div>
    )
}